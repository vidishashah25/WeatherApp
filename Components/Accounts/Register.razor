@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using WeatherApp.Models
@inject WeatherApp.Data.AppDbContext Db
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="min-h-screen bg-[#FBFFE4] flex items-center justify-center px-4">
    <div class="w-full max-w-md bg-white border border-[#A3D1C6] shadow-lg rounded-3xl p-8">
        <h2 class="text-3xl font-bold text-center text-[#3D8D7A] mb-6">Register</h2>

        <EditForm Model="@registerViewModel" OnValidSubmit="@RegisterUser" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 mb-4 text-sm" />

            <div class="mb-4">
                <label class="block text-sm font-medium text-[#3D8D7A] mb-1">Username</label>
                <InputText class="w-full px-4 py-2 border border-[#B3D8A8] rounded-md focus:outline-none focus:ring-2 focus:ring-[#A3D1C6]"
                           @bind-Value="registerViewModel.Username" placeholder="Enter username" />
                <ValidationMessage For="@(() => registerViewModel.Username)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-[#3D8D7A] mb-1">Password</label>
                <InputText type="password"
                           class="w-full px-4 py-2 border border-[#B3D8A8] rounded-md focus:outline-none focus:ring-2 focus:ring-[#A3D1C6]"
                           @bind-Value="registerViewModel.Password" placeholder="Enter password" />
                <ValidationMessage For="@(() => registerViewModel.Password)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-[#3D8D7A] mb-1">Role</label>
                <InputSelect class="w-full px-4 py-2 border border-[#B3D8A8] rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-[#A3D1C6]"
                             @bind-Value="registerViewModel.Role">
                    <option value="">-- Select role --</option>
                    <option value="super">Super</option>
                    <option value="simple">Simple</option>
                </InputSelect>
                <ValidationMessage For="@(() => registerViewModel.Role)" class="text-red-500 text-sm mt-1" />
            </div>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="bg-red-100 text-red-700 px-4 py-2 rounded-md text-sm mb-4">@Message</div>
            }

            <button type="submit" class="w-full bg-[#3D8D7A] text-white py-2 rounded-md font-semibold hover:bg-[#2f6e63] transition">
                Register
            </button>

            <div class="text-center mt-4 text-sm text-[#3D8D7A]">
                Already have an account? <a href="/login" class="text-[#A3D1C6] hover:underline">Back to Login</a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    RegisterViewModel registerViewModel = new();
    string Message = "";

    private async Task RegisterUser()
    {
        if (Db.Users.Any(u => u.Username == registerViewModel.Username))
        {
            Message = "Username already exists.";
            return;
        }

        var user = new User
        {
            Username = registerViewModel.Username,
            PasswordHash = BCrypt.Net.BCrypt.HashPassword(registerViewModel.Password),
            Role = registerViewModel.Role
        };

        Db.Users.Add(user);
        await Db.SaveChangesAsync();
        Navigation.NavigateTo("/login");
    }
    public class RegisterViewModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Role is required")]
        public string Role { get; set; } = "";
    }
}