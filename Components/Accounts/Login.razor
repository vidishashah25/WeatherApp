@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http
@using WeatherApp.Data;
@using WeatherApp.Models.ViewModel;
@inject AppDbContext db
@inject NavigationManager navManager


<div class="min-h-screen flex items-center justify-center">
    <div class="w-full max-w-md bg-white rounded-3xl shadow-lg border border-[#A3D1C6] p-8">
        <h2 class="text-3xl font-bold text-center text-[#3D8D7A] mb-6">Login to WeatherApp</h2>

        <EditForm Model="UserViewModel" OnValidSubmit="AuthenticateMethod" FormName="LoginForm">
            <div class="mb-4">
                <label class="block text-sm font-medium text-[#3D8D7A] mb-1">Username</label>
                <InputText @bind-Value="UserViewModel.Username" class="w-full px-4 py-2 border border-[#B3D8A8] rounded-md focus:outline-none focus:ring-2 focus:ring-[#A3D1C6]" placeholder="Enter username" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-[#3D8D7A] mb-1">Password</label>
                <InputText type="password" @bind-Value="UserViewModel.Password" class="w-full px-4 py-2 border border-[#B3D8A8] rounded-md focus:outline-none focus:ring-2 focus:ring-[#A3D1C6]" placeholder="Enter password" />
            </div>

            @if (!string.IsNullOrEmpty(errormessage))
            {
                <div class="bg-red-100 text-red-700 px-4 py-2 rounded-md text-sm mb-4">@errormessage</div>
            }

            <button type="submit" class="w-full bg-[#3D8D7A] text-white py-2 rounded-md font-semibold hover:bg-[#326e63] transition">
                Login
            </button>
        </EditForm>

        <div class="text-center mt-4 text-sm text-[#3D8D7A] font-medium">
            Not registered?
            <a href="/register" class="text-blue-500 hover:underline">Register here</a>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? _httpContext { get; set; }

    private string errormessage;

    [SupplyParameterFromForm]
    public UserViewModel UserViewModel { get; set; } = new();


    private async Task AuthenticateMethod()
    {

        var userAccount = db.Users.FirstOrDefault(x => x.Username == UserViewModel.Username);

        if (userAccount == null || !BCrypt.Net.BCrypt.Verify(UserViewModel.Password, userAccount.PasswordHash))
        {
            errormessage = "Invalid username or Password";
            return;
        }

        var claim = new List<Claim>
        {
            new Claim(ClaimTypes.Name, UserViewModel.Username),
            new Claim (ClaimTypes.Role, userAccount.Role)
        };

        var Identity = new ClaimsIdentity(claim, CookieAuthenticationDefaults.AuthenticationScheme);

        var principal = new ClaimsPrincipal(Identity);

        await _httpContext.SignInAsync(principal);

        navManager.NavigateTo("/");
    }

    
}
