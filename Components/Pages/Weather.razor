@page "/weather"
@using Microsoft.AspNetCore.Authorization
@using WeatherApp.Models
@using WeatherApp.Services
@inject WeatherService WeatherService
@attribute [StreamRendering]
@attribute [Authorize(Roles = "super,simple")]
@inject WeatherApp.Data.AppDbContext Db
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<div class="min-h-screen bg-[#FBFFE4] flex flex-col items-center px-4 py-10">
    <h2 class="text-3xl font-bold text-[#3D8D7A] mb-8">Check Weather</h2>

    <!-- Search Input -->
    <div class="w-full max-w-md mb-6">
        <div class="flex shadow-md rounded-lg overflow-hidden border border-[#A3D1C6]">
            <input @bind="city"
                   type="text"
                   class="flex-1 px-4 py-2 focus:outline-none text-[#3D8D7A]"
                   placeholder="Enter city name..." />
            <button @onclick="GetWeather"
                    class="bg-[#3D8D7A] text-white px-5 hover:bg-[#2f6e63] transition">
                <i class="bi bi-search"></i> Search
            </button>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="bg-red-100 text-red-700 px-4 py-2 rounded-md mt-3 text-sm">@error</div>
        }
    </div>

    <!-- Weather Display -->
    @if (weather != null)
    {
        <div class="w-full max-w-5xl">
            <!-- Current Weather -->
            <div class="bg-white border border-[#B3D8A8] rounded-3xl shadow-lg p-6 text-center mb-10">
                <h3 class="text-2xl font-semibold text-[#3D8D7A] mb-2">
                    <i class="bi bi-geo-alt-fill text-[#A3D1C6] mr-1"></i>
                    @weather.location.name, @weather.location.country
                </h3>

                <div class="my-4">
                    <img src="https:@weather.current.condition.icon"
                         alt="Weather icon"
                         class="mx-auto w-16 h-16" />
                </div>

                <p class="text-xl text-[#3D8D7A] font-medium mb-2">@weather.current.condition.text</p>

                <div class="mb-1">
                    <span class="inline-block px-3 py-1 bg-[#A3D1C6] text-[#003C43] rounded-full font-semibold text-lg">
                        @weather.current.temp_c &deg;C
                    </span>
                </div>

                <p class="text-sm text-[#3D8D7A]/80">
                    Feels like: @weather.current.feelslike_c &deg;C
                </p>

                <AuthorizeView Roles="super">
                    <button class="mt-6 bg-[#3D8D7A] text-white px-5 py-2 rounded-md hover:bg-[#2f6e63] transition"
                            @onclick="AddFavoriteCity">
                        <i class="bi bi-star-fill mr-1"></i> Add to Favorites
                    </button>
                </AuthorizeView>
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="mt-4 text-green-700 bg-green-100 px-4 py-2 rounded text-sm">
                        @successMessage
                    </div>
                }
            </div>

            <!-- 3-Day Forecast -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                @foreach (var day in weather.forecast.forecastday)
                {
                    <div class="bg-white rounded-2xl shadow-md p-4 text-center border border-[#A3D1C6]">
                        <p class="text-lg font-semibold text-[#3D8D7A] mb-2">@day.date</p>
                        <img src="https:@day.day.condition.icon" alt="icon" class="w-12 h-12 mx-auto mb-2" />
                        <p class="text-[#3D8D7A] text-sm mb-2">@day.day.condition.text</p>
                        <div class="text-sm text-[#003C43] space-y-1">
                            <div><strong>Max:</strong> @day.day.maxtemp_c &deg;C</div>
                            <div><strong>Min:</strong> @day.day.mintemp_c &deg;C</div>
                            <div><strong>Avg:</strong> @day.day.avgtemp_c &deg;C</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string city { get; set; } = "";
    private WeatherApiResponse? weather;
    private string? error;
    private string? successMessage;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task AddFavoriteCity()
    {
        error = null;
        successMessage = null;

        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && user.IsInRole("super"))
        {
            var dbUser = Db.Users.FirstOrDefault(u => u.Username == user.Identity.Name);
            if (dbUser == null)
                return;

            int favCount = Db.FavoriteCities.Count(f => f.UserId == dbUser.Id);
            if (favCount >= 5)
            {
                error = "You can only add up to 5 favorite cities!";
                return;
            }

            bool exists = Db.FavoriteCities.Any(f => f.CityName == city && f.UserId == dbUser.Id);
            if (!exists)
            {
                Db.FavoriteCities.Add(new FavoriteCity
                {
                    CityName = city,
                    UserId = dbUser.Id
                });
                await Db.SaveChangesAsync();
                successMessage = $"'{city}' added to favorites!";
            }
            else
            {
                error = "This city is already in your favorites!";
            }
        }
    }

    private async Task GetWeather()
    {
        error = null;
        successMessage = null;
        weather = null;

        if (string.IsNullOrWhiteSpace(city))
        {
            error = "Please enter a city name.";
            return;
        }

        try
        {
            weather = await WeatherService.GetWeatherAsync(city);
            if (weather == null)
                error = "City not found or API error.";
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }
    }
}